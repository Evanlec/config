#!/usr/bin/perl -w
#
# $Id: qkdirstats,v 1.12 2005/09/06 00:40:29 jmates Exp $
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Shows quick directory statistics and other summary information. Add as
# a chpwd function under zsh(1) for an overview on interactive cd:
#
# function chpwd {
#   [[ "$PWD" == "$HOME" ]] || qkdirstats
# }

use strict;

my $timeout = 3;

use Cwd qw(getcwd);
my $pwd = getcwd;

use Text::Wrap qw(wrap);
# TODO could lookup from terminal information?
local $Text::Wrap::columns = 78;

# summary information in global vars
my %keys;
my %counts;

my @overview;
my $OVERVIEW_MAX       = 50;
my $OVERVIEW_MAX_LINES = 5;

# TODO want to set 'readonly' key if do not have write permission in
# directory

# directory listing can hang or take far too long, so need timeouts
eval {
  local $SIG{ALRM} = sub { die "alarm timeout\n" };
  alarm $timeout;

  dirdata();

  alarm 0;
};
if ($@) {
  if ( $@ !~ /alarm timeout/ ) {
    chomp $@;
    die "error: unknown error: dir=$pwd, errno=$@\n";
  } else {
    $keys{timeout} = 1;
  }
}

if ( not @overview and not keys %keys ) {
  exit;
}
print_output();

sub dirdata {
  opendir DIR, '.' or die "error: could not open directory: dir=$pwd\n";
  while ( my $file = readdir DIR ) {
    next if $file eq '.' or $file eq '..';

    my @stat = lstat $file;

    if ( $file eq 'CVS' ) {
      $keys{CVS} = 1;
      next;
    } elsif ( $file eq '.svn' ) {
      $keys{SVN} = 1;
      next;
    }

    $counts{total}++;
    if ( -f _ ) {
      $counts{file}++;
    } elsif ( -d _ ) {
      $counts{dir}++;
    } elsif ( -l _ ) {
      $counts{link}++;
    } else {
      $counts{other}++;
    }

    if ( $file =~ m/^\./ ) {
      $keys{hidden} = 1;
      next;
    }

    if ( @overview <= $OVERVIEW_MAX ) {
      push @overview, $file;
    }
  }

  $keys{empty} = 1 if !@overview;
}

sub print_output {
  if ( exists $keys{empty} and exists $keys{hidden} and keys %keys == 2 ) {
    exit;
  }

  my @metadata = sort keys %keys;
  if ( not exists $keys{empty} ) {
    push @metadata, map { "$_=$counts{$_}" } sort keys %counts;
  }

  # TODO this also needs to be wrapped on lines and limited...
  if (@metadata) {
    print wrap( 'm  ', 'm  ', @metadata ) . "\n";
  }

  # TODO encode filenames, form into lines, limit number of lines to show...
  if (@overview) {
    my $output = wrap( 'f  ', 'f  ', sort @overview );
    my @lines = split /\n/, $output;
    if ( @lines >= $OVERVIEW_MAX_LINES ) {
      if ( @lines > $OVERVIEW_MAX_LINES ) {
        $lines[ $OVERVIEW_MAX_LINES - 1 ] =~ s/(\S+)$/.../;
      }
      @lines = @lines[ 0 .. $OVERVIEW_MAX_LINES - 1 ];
    }
    print join( "\n", @lines ), "\n";
  }
}

